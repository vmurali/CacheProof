Theorem conservative:
Directory is a conservative estimate of parent
Proof: First clause of mainInd

Theorem cross:
Responses from parent and child never cross
Proof: Second clause of mainInd

Theorem cReqRespSent:
Req sent from child never gets received by parent before a response sent by same child sent earlier (or at that time)
Proof: 3rd clause of mainInd

Theorem cRespFifo:
Responses from one child are received by parent in FIFO order
Proof: 4th clause of mainInd

Theorem cRecvRespFormerState:
When a child receives a response from parent, the state of the child at the
time of receiving is the state of the parent at the time of sending that
response
Proof: Consider a response received by child at time tr.
Let the response be sent by parent at time ts.
Case 1: The last sending or receiving resp in the child happened because it received a response at tm.
State of child at tm+1 = state at tr.
Let this be sent by parent at tn.
Case 1a: If the parent has received any response at tk, tn < tk < ts.
Then it must be sent after tm, to not violate cross. It must
be sent before tr because sending must happen before receiving and receiving
happens before ts. This violates the case hypothesis.
Case 1b: If the parent has sent any response at tk, tn < tk < ts.
It must have arrived at child after tm, before tr because parent-to-child
follows FIFO. This violates the last sending or receiving condition.
Case 1c: If the parent has neither sent nor received responses between tn and ts
Then state of parent at tn+1 = state at ts. And since child changes to the
same state as parent when receiving the response at tm, the state of child at
tr matches that of parent at ts.
Case 2: The last sending or receiving resp in the child happened because it
sent a response at tm.
State of child at tm+1 = state of tr. Let this be received at parent at tn. tn
< ts to not violate cross.
Case 2a: If the parent has received any response at tk, tn < tk < ts.
Then it must be sent by child after tm to not violate cRespFifo. It must be
sent before tr because it was received before ts which happens before tr. So,
it violates the last sending or receiving condition of the case
Case 2b: If the parent has sent any response at tk, tn < tk < ts.
Then the response must have reaced before tr because of FIFO from parent to
child messages. It must be received after tm because it was sent after tn, and
tm occurs before tn. So it violates the last sending or receiving condition of the case
Case 2c: If the parent has neither sent nor received any response at tk, tn < tk < ts
Then state of the parent at tn+1=state at ts. And since parent changes to the
same state as child when receiving the response at tm, the state of child at tr
matches that of parent at ts.
Case 3: If the child neither sends nor receives any response till ts.
State of child is same as initial state.
Case 3a: If parent has sent a response before tr.
This response must have been received by child before ts (because of FIFO from
parent to child) and hence violates case condition.
Case 3b: If parent has received a response before tr.
It must be sent by child before ts since ts >= tr. This violates the case condition
Case 3c: If parent has neither sent or received a response till ts.
The state is same as initial, so the state of child at ts matches with that of parent at tr.

Theorem pRecvRespFormerState:
When a parent receives a response from child, the state of the parent at the
time of receiving is the state of the child at the time of sending that
response
Proof: Parent dequeues a response only when the current state matches with the
(previous state) of the response, which was set to be equal to the state of the
child when sending the response

Theorem childUpgradesOnRecv:
A child upgrades on receiving a response
Proof:
The previous state of the parent is same as state of child when receiving a
response. And a response is sent by parent only on upgrade.

Theorem parentDowngradesOnRecv:
A parent downgrades on receiving a response
Proof:
The previous state of the child is same as state of parent when receiving a
response. And a response is sent by child only on downgrade.
