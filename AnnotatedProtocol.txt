Initial
forall a, m.data[a] = Initial


Load request at L1
when p2cReq[c].first = <Ld a ll>
     /\ c.state[a] >= S {
  c2pLdResp[c].enq(<ll c.data[a] t>)
  p2cReq.deq
}

Store request at L1
when p2cReq[c].first = <St a sl>
     /\ c.state[a] > S {
  c.data[a] = sl
  c2pStResp[c].enq(<sl t>)
  p2cReq.deq
}

Child sends request
when c.state[a] < x
     /\ c.waitp[a] = Nothing {
  c.waitp[a] = Valid x
  c2mReq[c].enq(<a (c.state[a]) x>)
}

Parent receives request and sends response
when c2mReq[c].first = <a y x>
     /\ (x = M ->
          forall i, i <> c -> m.statec[i][a] = I)
     /\ (x = S ->
          forall i, i <> c -> m.statec[i][a] <= S)
     /\ m.waitc[c][a] = Nothing {
  m2c[c].enq(<Resp a x
               (m.statec[c][a] = I?
                  m.data[a]: _)>)
  m.statec[c][a] = x
  c2mReq[c].deq
}

Child receives response
when m2c[c].first = <Resp a x d> {
  if(c.waitp[a] = Valid y /\ y <= x)
    c.waitp[a] = Nothing
  if(c.state[a] = I)
    c.data[a] = d
  c.state[a] = x
  m2c[c].deq
}

Parent sends request
when m.statec[c][a] > x
     /\ m.waitc[c][a] = Nothing {
  m2c[c].enq(<Req a x>)
  m.waitc[c][a] = Valid x
}

Child receives request and sends response
when m2c[c].first = <Req a x>
     /\ c.state[a] > x {
  c2mResp[c].enq(<a (c.state[a]) x
                   (c.state[a] > S?
                      m.data[a]: _)>)
  c.state[a] = x
  m2c[c].deq
}

Parent receives response
when c2mResp[c].first = <Mesg a y x d>
     /\ y = m.statec[c][a] {
  if(m.waitc[c][a] = Valid y /\ y >= x)
    m.waitc[c][a] = Nothing
  if(m.statec[c][a] > S)
    c.data[a] = d
  m.statec[c][a] = x
  c2mResp[c].deq
}

Child sends voluntary response
when c.state[a] > x
     /\ c.waitp[a] = Nothing {
  c2mResp[c].enq(<a (c.state[a]) x
                   (c.state[a] > S?
                      m.data[a]: _)>)
  c.state[a] = x
}

Child receives request and drops
when m2c[c].first = <Req a x>
     /\ c.state[a] <= x {
  m2c[c].deq
}
