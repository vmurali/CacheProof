Setup

----------------------------------

Each node c has the following states:
  state : Denotes real state of this node
  p_to_c : Response from parent to child terminal
  c_to_p : Response from child to parent terminal

System:
  parent, child, p_to_c_network, c_to_p_network

  The networks contain FIFOs, and two terminals (a source and a sink)

  p_to_c and c_to_p networks have FIFO order.
  It takes indeterminate time for a message to reach from any node to any other node.

  In the description, the presence of resources/presence of a message in the FIFO is implicit - the corresponding group of actions (within the if-block) wouldn't fire if the implicit conditions are not met.

----------------------------------

Initialization

----------------------------------

parent and child have same state

----------------------------------

Action child_send y :
  y < c.state ->
    c.c_to_p := y
    c.state := y

Action parent_send y :
  y > p.state ->
    p.p_to_c := (p.state, y)
    p.state := y

Action parent_recv :
  p.state := p.c_to_p
  p.c_to_p.deq

Action child_recv :
  if fst c.p_to_c <= c.state
    then c.state := snd c.p_to_c
  c.p_to_c.deq

---------------------------------

Correctness Theorem:
  Consider two time-points P and C, such that
     a) x = c.state at time C is *not* as a result of an upgrade response sent by the parent *after* P. (Instead it is because of an upgrade request sent before P. Any number of downgrade responses can be sent from the child to the parent after it has received the upgrade response from the parent).
     b) y = p.state at time P is *not* as a result of a downgrade response sent by the child *after* C. (Instead it is because of a downgrade request sent before C. Any number of upgrade responses can be sent from the parent to the child after it has received the downgrade response from the child).
  Then x <= y

Correctness Corollary:
  At any time instant c.state <= p.state

